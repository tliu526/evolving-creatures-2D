// -*- html -*- //
/** \file journal.dox
\page Journal Development Journal

<i>Newest entries are at the top</i>

\section S11172015 11/18/2015 Crossover and Mutation

TODO define mutation function for each component subclass, need to find "reasonable" mutations for all the parameters
TODO define legal crossover between two creatures

\section S11172015 11/17/2015 Developing the Creature Infrastructure

In order to mutate our creatures, we first need some way to represent its "genotype." With so many free parameters, we decided that the best way to represent them would be via a graph just like Karl Sims's synthetic creatures. This will give us the framework to crossover two creatures as well as a general way to implement point mutation.

We've also added collision filtering so that the masses do not collide with each other, in order to mimic the behavior of the masses in SodaPlay

\section S11152015 11/15/2015 Implementing Muscles

\video{2015-11-16_random_creature_2.mp4, Random Creature}

TODO

\section S11142015 11/14/2015 Implementing Springs
After exploring the Box2D library, the distance joint seems to allow for the type of behavior we want out of our springs. It has an options to set <b>rest length</b>, <b>damping</b>, as well as <b>frequency</b>. We have all of our parts implemented using the <i>Component</i> base class so that when we abstract to our graph representations for the creatures themselves, we'll easily be able to store and manipulate the components in bulk. Here's a picture of some randomly generated "springy" creatures:

TODO picture

\section S11132015 11/13/2015 Learning About SodaPlay
The main goal of today was to find out about how the SodaConstructor operated in order for us to emulate it.
This was considerably harder to do than expected since it appears that everything about SodaPlay has been wiped off the internet. After a lot of digging, here are the basics of what we need to implement:

\subsection comp Components
(parameters in bold)
<ul>
<li> Mass: the vertices that connect the springs; are the only things that have weight in the simulation. In Sodaplay all masses have the same <b>weight</b> but this is an additional parameter we can tweak.
<li> Springs: the lines that are drawn between the masses. The relevant parameters for each spring are its 
<b>rest length</b> and its <b>amplitude</b>.
<li> Muscles: springs that expand and contract with respect to the sinusoidal energy wave that governs movement in the world. In addition to the spring parameters, a muscle also has a <b>phase</b>, which determines how it expands and contracts relative to other muscles.
</ul>

\subsection wave Energy Wave Function
The energy wave function governs when all the muscles expand/contract. The muscles thus effectively move with simple harmonic motion. We can adjust the <b>frequency</b> as well as the <b>amplitude</b> of the wave function as well.

\section S11122015 11/12/2015 Project Start Day
TODO(Jamie)

*/
